basePath: /
definitions:
  model.Article:
    properties:
      articlename:
        type: string
      body:
        type: string
      creationDate:
        type: string
      title:
        type: string
      username:
        type: string
    type: object
  model.Articlename:
    properties:
      articlename:
        type: string
    type: object
  model.CreateArticle:
    properties:
      body:
        type: string
      title:
        type: string
      username:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  model.FindUsers:
    properties:
      name:
        type: string
      username:
        type: string
    type: object
  model.GetArticle:
    properties:
      body:
        type: string
      creationDate:
        type: string
      title:
        type: string
      username:
        type: string
    type: object
  model.GetUser:
    properties:
      name:
        type: string
    type: object
  model.Login:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.TokensResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  model.UpdateArticle:
    properties:
      body:
        type: string
      title:
        type: string
    type: object
  model.UpdateUser:
    properties:
      name:
        type: string
      password:
        type: string
    type: object
  model.User:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API of article site
  title: Artpaper API
  version: "1.0"
paths:
  /article/create:
    post:
      consumes:
      - application/json
      description: Create article
      operationId: create-article
      parameters:
      - description: article body, title, owner's username
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.CreateArticle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Articlename'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create article
      tags:
      - article
  /article/delete/{articlename}:
    delete:
      consumes:
      - application/json
      description: Delete article by articlename
      operationId: delete-article
      parameters:
      - description: Articlename
        in: path
        name: articlename
        required: true
        type: string
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete article
      tags:
      - article
  /article/find:
    get:
      description: Find articles by title, author, date from and till
      operationId: find-articles
      parameters:
      - description: Title to find
        in: query
        name: title
        type: string
      - description: author
        in: query
        name: username
        type: string
      - description: from date
        in: query
        name: from
        type: string
      - description: till date
        in: query
        name: to
        type: string
      - description: Quantity
        in: query
        name: quantity
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Article'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Find articles
      tags:
      - article
  /article/get/{articlename}:
    get:
      description: Get article by articlename
      operationId: get-article
      parameters:
      - description: Articlename
        in: path
        name: articlename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetArticle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get article
      tags:
      - article
  /article/update/{articlename}:
    put:
      consumes:
      - application/json
      description: Update article by articlename
      operationId: update-article
      parameters:
      - description: Articlename
        in: path
        name: articlename
        required: true
        type: string
      - description: article body, title, owner's username
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateArticle'
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update article
      tags:
      - article
  /login:
    post:
      consumes:
      - application/json
      description: Login with username and password returning access and refresh tokens
      operationId: login
      parameters:
      - description: username and password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login
  /refresh:
    post:
      description: Refresh tokens
      operationId: refresh
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Refresh
  /user/create:
    post:
      description: Create user
      operationId: create-user
      parameters:
      - description: User account data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.User'
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create user
      tags:
      - user
  /user/delete/{username}:
    delete:
      description: Delete user by username
      operationId: delete-user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - user
  /user/find:
    get:
      description: Find users by username and name
      operationId: find-usera
      parameters:
      - description: Pattern to find
        in: query
        name: pattern
        required: true
        type: string
      - description: Quantity
        in: query
        name: quantity
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FindUsers'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Find users
      tags:
      - user
  /user/get/{username}:
    get:
      description: Get user by username
      operationId: get-user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get user
      tags:
      - user
  /user/update/{username}:
    put:
      consumes:
      - application/json
      description: Update user by username
      operationId: update-user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Updated data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUser'
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
